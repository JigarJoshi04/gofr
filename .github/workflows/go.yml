name: Workflow-Pipeline

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  run_tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7.0.5
        ports:
          - "2002:6379"
        options: "--entrypoint redis-server"

      mysql:
        image: mysql:8.2.0
        ports:
          - "2001:3306"
        env:
          MYSQL_ROOT_PASSWORD: "password"
          MYSQL_DATABASE: "test"

    steps:
      - name: Checkout code into go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go 1.21
        uses: actions/setup-go@v4
        with:
          go-version: 1.21
        id: Go

      - name: Get dependencies
        run: go mod download

  example_unit_testing:
    name: Example Unit Testingüõ†
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Test
        run: |
          export GOFR_ENV=test
          go test gofr.dev/examples/... -v -short -coverprofile profile.cov -coverpkg=gofr.dev/examples/...
          go tool cover -func profile.cov

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: Example-Test-Report
          path: profile.cov

  pkg_unit_testing:
    name: PKG Unit Testingüõ†
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Test
        run: |
          export GOFR_ENV=test
          go test gofr.dev/pkg/... -v -short -coverprofile profile.cov -coverpkg=gofr.dev/pkg/...
          go tool cover -func profile.cov

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: PKG-Coverage-Report
          path: profile.cov

  parse_coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [example_unit_testing, pkg_unit_testing]
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Download Coverage Reports
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Merge Coverage Files
        working-directory: artifacts
        run: |
          awk '!/^mode: / && FNR==1{print "mode: set"} {print}' ./example_unit_testing/profile.cov > merged_profile.cov
          tail -n +2 ./pkg_unit_testing/profile.cov >> merged_profile.cov

      - name: Parse code-coverage value
        working-directory: artifacts
        run: |
          codeCoverage=$(go tool cover -func=merged_profile.cov | grep total | awk '{print $3}')
          codeCoverage=${codeCoverage%?}
          echo "CODE_COVERAGE=$codeCoverage" >> $GITHUB_ENV

  upload_coverage:
    name: Upload Coverageüìä
    runs-on: ubuntu-latest
    needs: parse_coverage
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/development' }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Download Coverage Report
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Merge Coverage Files
        working-directory: artifacts
        run: |
          awk '!/^mode: / && FNR==1{print "mode: set"} {print}' ./example_unit_testing/profile.cov > merged_profile.cov
          tail -n +2 ./pkg_unit_testing/profile.cov >> merged_profile.cov

      - name: Upload
        uses: paambaati/codeclimate-action@v5.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: artifacts/merged_profile.cov:gocov
          prefix: gofr.dev

  code_quality:
    name: Code QualityüéñÔ∏è
    runs-on: ubuntu-latest
    container: "golangci/golangci-lint:v1.55.2"
    needs: run_tests
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: Get dependencies
        run: go get -v -t -d ./...
      - name: GolangCI-Lint
        run: |
          golangci-lint run --timeout 9m0s
